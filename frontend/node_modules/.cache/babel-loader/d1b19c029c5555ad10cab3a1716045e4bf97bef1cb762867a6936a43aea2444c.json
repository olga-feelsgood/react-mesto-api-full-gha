{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Что-то пошло не так: ${res.status}`);\n    }\n  }\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  setUserInfo(name, about) {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify(name, about)\n    }).then(this._checkRes);\n  }\n  updateProfileAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify(avatar)\n    }).then(this._checkRes);\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  createCard(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers,\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._checkRes);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      headers: this._headers,\n      method: 'DELETE'\n    }).then(this._checkRes);\n  }\n  _addLikeToCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      headers: this._headers,\n      method: 'PUT'\n    }).then(this._checkRes);\n  }\n  _removeLikeFromCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      headers: this._headers,\n      method: 'DELETE'\n    }).then(this._checkRes);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this._addLikeToCard(cardId);\n    } else {\n      return this._removeLikeFromCard(cardId);\n    }\n  }\n}\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-58',\n  headers: {\n    'Content-Type': 'application/json',\n    authorization: 'd42ba68e-f900-4c11-95ea-04d69bce07af'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","url","headers","_url","_headers","_checkRes","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","setUserInfo","name","about","method","body","JSON","stringify","updateProfileAvatar","avatar","getInitialCards","createCard","_ref2","link","deleteCard","cardId","_addLikeToCard","_removeLikeFromCard","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/Users/olgafilchukova/Desktop/YP/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({ url, headers }) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json()\n    }\n    else {\n      return Promise.reject(`Что-то пошло не так: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    })\n      .then(this._checkRes)\n  }\n\n  setUserInfo(name, about) {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify(name, about)\n    })\n      .then(this._checkRes)\n  }\n\n  updateProfileAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify(avatar)\n    })\n      .then(this._checkRes)\n  }\n\n\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    })\n      .then(this._checkRes)\n  }\n\n  createCard({ name, link }) {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers,\n      method: 'POST',\n      body: JSON.stringify({ name, link })\n    })\n      .then(this._checkRes)\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      headers: this._headers,\n      method: 'DELETE'\n    })\n      .then(this._checkRes)\n  }\n\n  _addLikeToCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      headers: this._headers,\n      method: 'PUT',\n    })\n      .then(this._checkRes)\n  }\n\n  _removeLikeFromCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      headers: this._headers,\n      method: 'DELETE',\n    })\n      .then(this._checkRes)\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {return this._addLikeToCard(cardId)}\n    else {return this._removeLikeFromCard(cardId)}\n  }\n\n\n}\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-58',\n  headers: {\n    'Content-Type': 'application/json',\n    authorization: 'd42ba68e-f900-4c11-95ea-04d69bce07af'\n  }\n})\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}